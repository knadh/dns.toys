# Description: Excuses for developers
# Source:
#  - https://github.com/michelegera/devexcuses-api
#  - https://github.com/thecatontheflat/excuses
#  - https://github.com/afreeorange/developer-excuses
#  - https://github.com/lnfnunes/WFH-excuses
#  - https://gist.github.com/fortytw2/78f5f9ef915cb43a3be4
#  - https://github.com/GabrielCrackPro/developer-excuses-app


Actually, that's a feature.
Did you check for a virus on your system?
Even though it doesn't work, how does it feel?
Everything looks fine on my end.
How is that possible?
I broke that deliberately to do some testing.
I can't make that a priority right now.
I can't test everything.
I couldn't find any examples of how that can be done anywhere online.
I couldn't find any library that can even do that.
I did a quick fix last time but it broke when we rebooted.
I didn't anticipate that I would make any errors.
I didn't create that part of the program.
I didn't receive a ticket for it.
I forgot to commit the code that fixes that.
I have never seen that before in my life.
I have too many other high-priority things to do right now.
I haven't been able to reproduce that.
I haven't had a chance to run that code yet.
I haven't had any experience with that before.
I haven't touched that code in weeks.
I heard there was a solar flare today.
I must have been stress-testing our production server.
I must not have understood what you were asking for.
I thought I finished that.
I thought he knew the context of what I was talking about.
I thought you signed off on that.
I told you yesterday it would be done by the end of today.
I usually get a notification when that happens.
I was just fixing that.
I was told to stop working on that when something important came up.
In the interest of efficiency I only check my email for that on a Friday.
It can't be broken, it passes all unit tests.
It must be a hardware problem.
It must be because of a leap year.
It probably won't happen again.
It was working in my head.
It works for me.
It works, but it's not been tested.
It would have taken twice as long to build it properly.
It would take too long to rewrite the code from scratch.
It's a browser compatibility issue.
It's a character encoding issue.
It's a compatibility issue.
It's a known bug with the programming language.
It's a remote vendor issue.
It's always been like that.
It's an unexpected emergent behaviour of several last-minute abstractions.
It's just some unlucky coincidence.
It's never done that before.
It's never shown unexpected behavior like this before.
It's not a code problem â€” our users need more training.
I'll have to fix that at a later date.
I'm not familiar with it so I didn't fix it in case I made it worse.
I'm not getting any error codes.
I'm not sure as I've never had a look at how that works before.
I'm still working on that as we speak.
I'm surprised it was working at all.
I'm surprised it works as well as it does.
Management insisted we wouldn't need to waste our time writing unit tests.
Maybe somebody forgot to pay our hosting company.
My time was split in a way that meant I couldn't do either project properly.
No one told me so I was forced to assume which way to do that.
Nobody asked me how long it would actually take.
Nobody has ever complained about it.
Oh, that was just a temporary fix.
Oh, that was only supposed to be a placeholder.
Oh, you said you DIDN'T want that to happen?
Our code quality is no worse than anyone else in the industry.
Our hardware is too slow to cope with demand.
Our internet connection must not be working.
Our redundant systems must have failed as well.
Please ignore that, it's for debugging.
Somebody must have changed my code.
THIS can't be the source of THAT.
That behaviour is in the original specification.
That code seemed so simple I didn't think it needed testing.
That error means it was successful.
That feature was slated for phase two.
That feature would be outside the scope.
That important email must have been marked as spam.
That isn't covered by my job description.
That process requires human oversight that nobody was providing.
That was literally a one in a million error.
That wasn't in the original specification.
That worked perfectly when I developed it.
That wouldn't be economically feasible.
That's already fixed, it just hasn't taken effect yet.
That's interesting, how did you manage to make it do that?
That's not a bug it's a configuration issue.
That's the fault of the graphic designer.
The accounting department must have canceled that subscription.
The client must have been hacked.
The client wanted it changed at the last minute.
The code is compiling.
The DNS hasn't propagated yet.
The download must have been corrupted.
The existing design makes it difficult to do the right thing.
The marketing department made us put that there.
The person responsible doesn't work here anymore.
The problem seems to be with our legacy software.
The program has never collected that information.
The project manager said no one would want that feature.
The project manager told me to do it that way.
The request must have dropped some packets.
The specifications were ambiguous.
The third-party documentation doesn't exist.
The user must not know how to use it.
There must be something strange in your data.
There was too little data to bother with the extra functionality at the time.
There's currently a problem with our hosting company.
This code was not supposed to go into production yet.
This is a previously known bug you told me not to work on yet.
We didn't have enough time to peer review the final changes.
Well done, you found my easter egg!
Well, at least it displays a very pretty error.
Well, at least we know not to try that again.
Well, that's a first.
What did I tell you about using parts of the system you don't understand?
What did you type in wrong to get it to crash?
Where were you when the program blew up?
Why do you want to do it that way?
You must have done something wrong.
You're doing it wrong.
You must have the wrong version.
You used the wrong compiling options in the build I made.
I got pulled into another project that needed to be done urgently.
Are you sure you don't have a problem with your internet connection?
Are you sure you want it to work that way?
Are you sure you've installed the latest patches to your browser?
Are you sure you've installed the latest patches to your operating system?
Are you sure?
But we're a small team so what do you expect?
But we're a startup so what do you expect?
But we're underresourced so what do you expect?
Everyone was sick.
Have you cleared your cache?
Have you tried refreshing your browser?
Have you updated your browser?
Have you updated your OS?
I couldn't reproduce that error.
I did a quick fix for that already, it must have been reverted.
I don't remember that in the original specification.
I don't see anything in my error logs.
I forgot my computer.
I found a bug in the Framework.
I had too many projects so I had to rush that feature.
I haven't pushed the fix up yet.
I just need one more day to work on that.
I never received a ticket for that.
I thought that was signed off?
I was busy fixing more important issues.
I was sick.
I was sure that had been fixed.
I wasn't told how to do that so I had to guess which way the clients wanted it.
I'm pretty sure that works most of the time.
I'm pretty sure that's the way it is meant to work.
I'm still working on that part of the codebase.
I'm sure that was written by a contractor.
I'm sure that was written by a freelancer.
Is that not supposed to happen?
It must be a browser cache error.
It must be a timezone issue.
It must be a unicode issue.
It must be a virus on your system.
It must be an issue with the corporate firewall.
It must be missing some dependencies.
It must be the corporate proxy.
It was only a small change so I didn't think it needed tests.
It was probably a race condition.
It's a browser issue.
It's just a warning, not an error.
It's most likely a forwarding proxy server that is caching the response.
It's not like I can't write that fix in like 5 minutes.
No, I didn't get any email from you about that.
Nothing has changed in the code.
Oh, that was only supposed to be a placeholder.
Oh, you said you DIDN'T want that to happen?
Our code quality is up to industry standards.
PEBKAC.
Someone must have changed my code.
That code was written by the last dev.
That code wasn't meant to be in production.
That error means it was successful.
That feature is a nice-to-have.
That feature is low priority.
That feature is on our roadmap.
That feature isn't due in this phase.
That feature isn't due yet.
That output is only wrong 99% of the time.
That output is only wrong half the time.
That was like that before I started here.
That's a data model issue.
That's a problem with a third-party application.
That's a training issue.
That's a user issue.
That's a vendor issue.
That's just temporary and we're still working on it.
The client application must have dropped some packets.
The client requested an XML response, but JSON would've solved the issue.
The design makes it difficult to build this correctly.
The documentation for that feature is wrong.
The failovers must have failed.
The file must have been corrupted.
The fix for that is in progress.
The issue tracker was updated and some issues were lost.
The program was never meant to work that way.
The specification contained conflicting requirements.
The stakeholder was sick.
The tests didn't cover that edge case.
There must be a problem with the virtual machine.
There must have been a miscommunication during the requirements phase.
There must have been a problem with the request.
There's only a one in a million chance of that error occurring.
This is the first time anyone has mentioned it.
This wasn't filed in the issue tracker.
We broke that deliberately to test it.
We contracted that work out months ago.
We didn't have the budget to build it properly.
We didn't have time to QA that feature.
We don't have the bandwidth to address that at the moment.
We don't have the budget to address that at the moment.
We have to do it that way for security reasons.
We must have been stress testing the server.
We outsourced that part.
We were never asked to make it do that.
We've not been able to reproduce the problem.
We've not received any error notifications.
The accounting department made me put that there.
The sales department made me do it that way.
The accounting department made me do it that way.
The sales department made me put that there.
The accounting department asked it to be that way.
The sales department asked for it to be that way.
That must be an accounting department error.
That must be a sales department error.
Man, I am not that type of a person!
Someone must have left some test code in.
The client requested an XML response, but JSON is clearly better.
The dev that worked here for a week? Yeah, he wrote that.
But we are in a startup, what would you expect?
I forgot my computer.
The stakeholder was sick.
Everyone was sick.
I've a Dr appointment this morning at 10h40 hence I'll WFH.
I'm not feeling very well today hence I'll WFH.
I will be WFH tomorrow from 7am since my plane is leaving at 5pm.
I'm WFH due to an unexpected situation at home.
WFH: Car trouble yesterday and today. Punctured tire, replaced and alignment today.
I am very unwell and have lost my voice since last evening. I will be WFH today.
Will be WFH rest of day. Need to catch a flight shortly after work.
I'm WFH today again, my stomach is still feeling weird.
WFH Back to the tire shop to install tire and do alignment before lunch hour today.
I'm not feeling very well today. I'll WFH and will be available by all usual means.
I'll be WFH on Thursday. Wife is getting her wisdom teeth out that morning.
I will be WFH today, kids are off this week.
It's raining and my car is far away. WFH.
WFH today, car is at the mechanic getting fixed for inspection.
We lost our apartment keys last night and got locked out! We just entered into apartment by borrowing spare key from Leasing office. I will WFH in the morning session.
My daughter's daycare is closed today due to some emergency work in center so I'll WFH.
I've an appointment at DMV office this afternoon hence I'll WFH today.
I got flu and is WFH today as I am feverish and got body pain. I will be connected and available over phone and slack too.
I will be WFH today, my kids are sick and I need to look after them.
I woke up late, that's why I am WFH today.
I will be WFH because I'm waiting a shipment to arrive today.
My dog is sick, so I'm going to WFH today.
A company is going to do pest control here in my house and I will have to stay here to give them assistance, I'll be WFH.
The internet provider is coming to repair my network so I'll WFH today.
My grandmother poisoned me with ham! WFH today.
Don't worry, that value is only wrong half of the time.
I can have a look but there's a lot of if statements in that code!
I had to do the project backwards as people demanded results out of order.
I haven't had the chance to run that code yet.
I thought I fixed that.
It must be because of a leap second.
It was working in my head.
It worked yesterday.
It's a known bug with the server software.
It's an unexpected emergent behaviour of several last-minute abstractions.
Maybe somebody forgot to pay our hosting company.
My time was split in a way that meant I couldn't do either project properly.
That process requires human oversight that nobody was providing.
That code seemed so simple I didn't think it needed testing.
That behaviour is in the original specification.
That's interesting, how did you manage to make it do that?
That's not a bug it's a configuration issue.
The WYSIWYG must have produced an invalid output.
The original specification contained conflicting requirements.
The third party API is not responding.
The third party documentation doesn't exist.
The third party documentation is wrong.
The unit test doesn't cover that eventuality.
The user must not know how to use it.
There must be something strange in your data.
There were too many developers working on that same thing.
This code was not supposed to go in to production yet.
This is a previously known bug you told me not to work on yet.
We didn't have enough time to peer review the final changes.
We outsourced that months ago.
We should have updated our software years ago.
We spent three months debugging it because we only had one month to build it.
Well at least we know not to try that again.
What did you type in wrong to get it to crash?
Where were you when the program blew up?
You can't use that version on your system.
You must be missing some of the dependencies.
Your browser must be caching the old content.
The sales department made me do it that way.
The sales department made me put that there.
The accounting department asked it to be that way.
The sales department asked for it to be that way.
That must be an accounting department error.
That must be a sales department error.
Why do they want it that way?
The fail-overs must have failed.
You mustn't have got my email about that, check your spam.
There must have been a miscommunication on the requirements.
That's an architecture issue.
That's a data issue.
That's a user issue.
That's a support issue.
There must be an error with your data.
The 3rd party API must be down.
That is a known bug with the programming language.
That is a known bug with the framework.
That feature is part of phase two.
That feature is set to low priority.
That feature is a nice to have.
That is a problem with our host.
That is an issue with a legacy system.
That was like that before I started here.
That is a training issue.
There isn't the budget to address that at the moment.
I've not been able to recreate the issue.
That's been fixed, but the code still has to be released.
That's been fixed on another branch.
The developer who coded that doesn't work here anymore.
That is part of the old system.
I didn't write that part of the system.
It is unlikely to happen again.
That is a vendor issue.
The documentation for that feature is wrong.
We weren't given enough time to write unittests.
It must be a Y2K issue.
You're doing it wrong.
There must be a problem with the virtual machine.
We have to do it that way for security reasons.
That's a problem with a third party application.
It was such a simple change I didn't think it needed testing.
The specification contained conflicting requirements.
The specification was ambiguous.
The file must have corrupted.
There is nothing in my error logs.
You must be looking at the wrong version.
Your browser must be caching the old version.
It must just be a coincidence.
Our users need more training.
It must be a problem with your internet connection.
That feature isn't due in this phase.
That feature is outside of the project scope.
That's not in my job description.
That's the fault of the designer.
That's the fault of the UX designer.
That's the fault of the UI designer.
There must have been a problem with the request.
The browser must have dropped some packets.
Someone must have left some test code in.
We didn't have time to send that to QA.
That software should have been updated ages ago.
The client requested an XML response, but JSON is clearly better.
It's most likely a forwarding proxy server that is caching the response.
